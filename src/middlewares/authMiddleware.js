const jwt = require("jsonwebtoken");
const User = require("../models/User");

const authenticate  = async (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;

    let userId;

    if (authHeader && authHeader.startsWith("Bearer ")) {
      // ‚úÖ ∆Øu ti√™n x√°c th·ª±c b·∫±ng JWT
      const token = authHeader.split(" ")[1];
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      userId = decoded.id || decoded.userId;

      if (!userId) {
        return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
      }
    } else {
      // üßæ N·∫øu kh√¥ng c√≥ token, l·∫•y userId t·ª´ request
      userId = req.params.id || req.body.userId || req.query.userId;

      if (!userId) {
        return res.status(400).json({ message: "Thi·∫øu ID ng∆∞·ªùi d√πng" });
      }
    }

    // üîç T√¨m ng∆∞·ªùi d√πng trong database
    const user = await User.findById(userId);

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // ‚úÖ G·∫Øn user v√†o request v√† ti·∫øp t·ª•c
    req.user = user;
    next();

  } catch (error) {
    console.error("L·ªói x√°c th·ª±c:", error);
    return res.status(401).json({ message: "X√°c th·ª±c th·∫•t b·∫°i" });
  }
};

module.exports = authenticate ;